<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd">

	<context:annotation-config />

	<sec:authentication-manager />



	<sec:http pattern="/**" request-matcher="ant" create-session="stateless"
		disable-url-rewriting="true" use-expressions="true"
		entry-point-ref="zacMessageFixingAuthenticationEntryPoint">
		<sec:expression-handler ref="userRoleExpressionHandler" />

		<!-- Swagger doc -->
	<sec:intercept-url pattern="/**/apidocs/**"
			access="permitAll" />
		<sec:intercept-url pattern="/swagger-ui.html"
			access="permitAll" />
		<sec:intercept-url pattern="/v1/api-docs"
			access="permitAll" />		
		<sec:intercept-url pattern="/configuration/**"
			access="permitAll" />		
		<sec:intercept-url pattern="/swagger-resources"
			access="permitAll" />			
		<sec:intercept-url pattern="/webjars/**"
			access="permitAll" />	
            
        <sec:intercept-url pattern="/v1/test"
            access="permitAll" />   

		<sec:intercept-url pattern="/svc/gateway/v1/**"
			access="isFullyAuthenticated()"/>
		<sec:intercept-url pattern="/v1/**"
			access="isFullyAuthenticated()" />


		<sec:intercept-url pattern="/**" access="denyAll" />
		<sec:anonymous enabled="true" />
		<sec:csrf disabled="true"/>
		<sec:custom-filter ref="oauth2ClientFilter" before="PRE_AUTH_FILTER" />
		<sec:custom-filter ref="oauth2ServiceFilter"
			position="PRE_AUTH_FILTER" />
        <sec:headers/>    
	</sec:http>

	<oauth:resource-server id="oauth2ServiceFilter"
		token-services-ref="zacTokenService" entry-point-ref="zacMessageFixingAuthenticationEntryPoint" />



	<!-- This component is used by spring security to validate authentication 
		tokens in requests -->
	<bean id="zacTokenService" class="com.ge.predix.uaa.token.lib.ZacTokenService">
		<property name="serviceId" value="${serviceId}" />
		<property name="zacUrl" value="${zacUrl}" />
		<property name="serviceZoneHeaders" value="Predix-Zone-Id" />
		<property name="storeClaims" value="true" />
		<property name="oauth2RestTemplate" ref="zacRestTemplate" />
		<property name="defaultZoneConfig" ref="defaultZoneConfig" />
		<property name="serviceBaseDomain" value="${serviceBaseDomain}" />
	</bean>

	<bean id="zacRestTemplate"
		class="org.springframework.security.oauth2.client.OAuth2RestTemplate">
		<constructor-arg>
			<bean
				class="org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails">
				<property name="accessTokenUri" value="${zacUaaUrlToken}" />
				<property name="clientId" value="${zacClientId}" />
				<property name="clientSecret" value="${zacClientSecret}" />
			</bean>
		</constructor-arg>
	</bean>

	<bean id="defaultZoneConfig" class="com.ge.predix.uaa.token.lib.DefaultZoneConfiguration">
		<property name="trustedIssuerId" value="${defIssuerId}" />
		<property name="allowedUriPatterns">
			<list>
				<value>/zone/**</value>
			</list>
		</property>
	</bean>

	<oauth:client id="oauth2ClientFilter" />

	<bean id="userRoleExpressionHandler"
		class="com.ge.dspmicro.cloud.usermgmt.UserRoleExpressionHandler" />

	<bean id="defaultTenantRestTemplate"
		class="org.springframework.security.oauth2.client.OAuth2RestTemplate">
		<constructor-arg>
			<bean
				class="org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails">
				<property name="clientId" value="${defaultTenantClientId}" />
				<property name="clientSecret" value="${defaultTenantClientSecret}" />
				<property name="accessTokenUri" value="${defaultTenantUaaTokenUrl}" />
			</bean>
		</constructor-arg>
		<property name="requestFactory">
			<bean
				class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory" />
		</property>
	</bean>

	<bean id="tenantServiceRestTemplate"
		class="org.springframework.security.oauth2.client.OAuth2RestTemplate">
		<constructor-arg>
			<bean
				class="org.springframework.security.oauth2.client.token.grant.client.ClientCredentialsResourceDetails">
				<property name="clientId" value="${tenantServiceClientId}" />
				<property name="clientSecret" value="${tenantServiceClientSecret}" />
				<property name="accessTokenUri" value="${defaultTenantUaaTokenUrl}" />
			</bean>
		</constructor-arg>
		<property name="requestFactory">
			<bean
				class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory">
				<property name="readTimeout" value="65000" />
				<property name="connectTimeout" value="10000" />
				<property name="connectionRequestTimeout" value="10000" />
			</bean>
		</property>
	</bean>
</beans>
